y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
d <- data.frame(resids = vec)
ggplot(d, aes(sample = resids)) +
stat_qq() +
geom_abline(slope = slope, intercept = int, color="red")
}
qqplot.data(dlf$day3)
ggsave("qqplot.png")
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(QuantPsyc, car, EnvStats,tidyverse, coefplot, leaps, sjPlot, janitor, readr, datasets, rmarkdown, ggplot2, MASS, multcomp, effects,  gplots, caret, readxl, ggversa, knitr, nortest, huxtable, betareg, simpleboot, boot, gridExtra, MuMIn)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(QuantPsyc, car, EnvStats,tidyverse, coefplot, leaps, sjPlot, janitor, readr, datasets, rmarkdown, ggplot2, MASS, multcomp, effects,  gplots, caret, readxl, ggversa, knitr, nortest, huxtable, betareg, simpleboot, boot, gridExtra, MuMIn)
unlink("RMarkdown_Ejemplo_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mi_tabla=tribble(
~Edad, ~Genero, ~Pueblo nacido,
mi_tabla=tribble(
~Edad, ~Genero, ~Pueblo_nacido,
23, "F", "Caguas"
)
mi_tabla=tribble(
~Edad, ~Genero, ~Pueblo_nacido,
23, "F", "Caguas"
)
mi_tabla
mi_tabla=tribble(
~Edad, ~Genero, ~Pueblo nacido,
mi_tabla=tribble(
~Edad, ~Genero, ~Pueblo_nacido,
23, "F", "Caguas"
)
mi_tabla
knitr::opts_chunk$set(echo = TRUE)
A <- structure(list(Time = c(0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13,
14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30),
Counts = c(126.6, 101.8, 71.6, 101.6, 68.1, 62.9, 45.5, 41.9,
46.3, 34.1, 38.2, 41.7, 24.7, 41.5, 36.6, 19.6,
22.8, 29.6, 23.5, 15.3, 13.4, 26.8, 9.8, 18.8, 25.9, 19.3)), .Names = c("Time", "Counts"), row.names = c(1L, 2L,
3L, 5L, 7L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 19L, 20L, 21L, 22L, 23L, 25L, 26L, 27L, 28L, 29L, 30L,
31L), class = "data.frame")
attach(A)
names(A)
exponential.model <- lm(log(Counts)~ Time)
summary(exponential.model)
exponential.model2<- lm()
exponential.model <- lm(log(Counts)~ Time)
summary(exponential.model)
timevalues <- seq(0, 30, 0.1)
Counts.exponential2 <- exp(predict(exponential.model,list(Time=timevalues)))
plot(Time, Counts,pch=16)
lines(timevalues, Counts.exponential2,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
library(ggplot2)
ggplot(A, aes(Time, Counts))+
geom_smooth(method=lm, colour="blue")+
geom_smooth(aes(), method = "lm", formula = y ~ poly(x+1,2),
color ="red", se =TRUE, size = 1)+
geom_smooth(aes(), method = "lm", formula = y ~ log(x+1),
color ="orange", se =TRUE, size = 1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mi_tabla=tribble(
~Edad, ~Genero, ~Pueblo_nacido,
23, "F", "Caguas",
190, "M", "San Juan"
)
mi_tabla
mi_tabla=tribble(
~Edad, ~Genero, ~Pueblo_nacido,~Nueva variable,
mi_tabla=tribble(
~Edad, ~Genero, ~Pueblo_nacido,~Nueva_variable,
23, "F", "Caguas", 1,
190, "M", "San Juan", 2
)
mi_tabla
x=as_tibble(rnorm(1000, 0,1)) # Creamos un conjunto de datos
x
x=as_tibble(rnorm(1000, 0,1)) # Creamos un conjunto de datos
x
ggplot(x, aes(value))+
geom_histogram(colour="white")
install.packages("Rmisc")
install.packages("leaps")
install.packages("agricolae")
install.packages("gganimate")
install.packages("effects")
install.packages("caret")
install.packages("random")
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
Sys.Date()
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
#`r colorize("some words in red", "red")`
library(tidyverse)
library(gridExtra)
library(gt)
library(random)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
Sys.Date()
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
#`r colorize("some words in red", "red")`
library(tidyverse)
library(gridExtra)
library(gt)
library(random)
library(ggplot2)
set.seed(654875)
Edad_Salón_1=randomNumbers(100, min=20, max=27, col=1)
Edad_Salón_1=as.data.frame(Edad_Salón_1)
Edad_Salón_1=as.list(Edad_Salón_1)
Edad_Salón_1
set.seed(654875)
Edad_Salón_2=randomNumbers(100, min=20, max=26, col=1)
Edad_Salón_2=as.data.frame(Edad_Salón_2)
Edad_Salón_2=as.list(Edad_Salón_2)
Edad_Salón_2
Edad_Salón_1$Seq=seq(1:100)
Edad_Salón_2$Seq=seq(1:100)
df=bind_rows(Edad_Salón_1, Edad_Salón_2)
df$Salón=rep(c("Salón_1","Salón_2"), each=100)
df
as_tibble(df)
# para disparar tabla:
df%>%
select(V1, Salón)%>%
group_by(Salón)%>%
summarize(promedio=mean(V1),
mínima=min(V1),
máxima=max(V1))%>%
gt()%>%
tab_header(
title = "Tabla: Edad de los Estudiantes")
# para producir un diagrama de caja:
ggplot(df, aes(y=V1, x=Salón))+
geom_boxplot()+
ylab("Edad de los estudiantes")
knitr::include_graphics("Graficos/Carte_Napoleon.png")
knitr::include_graphics("Graficos/Minard_Carne_Paris.png")
knitr::include_graphics("Graficos/Florence_Nightingale.png")
knitr::include_graphics("Graficos/coxcombchart.png")
Edad_Salón_1$Seq=seq(1:100)
Edad_Salón_2$Seq=seq(1:100)
df=bind_rows(Edad_Salón_1, Edad_Salón_2)
df$Salon=rep(c("Salón_1","Salón_2"), each=100)
df
as_tibble(df)
# para disparar tabla:
df%>%
select(V1, Salon)%>%
group_by(Salon)%>%
summarize(promedio=mean(V1),
mínima=min(V1),
máxima=max(V1))%>%
gt()%>%
tab_header(
title = "Tabla: Edad de los Estudiantes")
# para disparar tabla:
df%>%
select(V1, Salon)%>%
dplyr::group_by(Salon)%>%
summarise(promedio=mean(V1, na.rm=TRUE),
mínima=min(V1, na.rm=TRUE),
máxima=max(V1, na.rm=TRUE))%>%
gt()%>%
tab_header(
title = "Tabla: Edad de los Estudiantes")
install.packages("extRemes")
install.packages("simpleboot")
as_tibble(df)
Edad_Salón_1$Seq=seq(1:100)
Edad_Salón_2$Seq=seq(1:100)
df=bind_rows(Edad_Salón_1, Edad_Salón_2)
df$Salón=rep(c("Salón_1","Salón_2"), each=100)
df
# para disparar tabla:
df%>%
dplyr::select(V1, Salón)%>%
dplyr::group_by(Salón)%>%
summarise(promedio=mean(V1, na.rm=TRUE),
mínima=min(V1, na.rm=TRUE),
máxima=max(V1, na.rm=TRUE))%>%
gt()%>%
tab_header(
title = "Tabla: Edad de los Estudiantes")
install.packages("ggversa")
install.packages("ggcorrplot")
install.packages("gapminder")
install.packages("animation")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
names(temp.promedio)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
Sys.Date()
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
#`r colorize("some words in red", "red")`
#if(!require(devtools)) install.packages("devtools")
#devtools::install_github("dgrtwo/gganimate")
#devtools::install_github("yihui/animation")
library(tidyverse)
library(gganimate)
library(rgl)
library(gapminder)
library(ggplot2)
library(animation)
library(gt)
gt(head(gapminder))
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.8) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Expectativa de Vida")
p
GDP_time=p + transition_time(year) +
labs(title = "Año: {frame_time}")
#GDP_time
animate(GDP_time, height = 600, width =600)
anim_save("GDP_time.gif")
p + facet_wrap(~continent) +
transition_time(year) +
labs(title = "Año: {frame_time}")
p + transition_time(year) +
labs(title = "Año: {frame_time}") +
view_follow(fixed_y = TRUE)
p + transition_time(year) +
labs(title = "Year: {frame_time}") +
shadow_wake(wake_length = 0.2, alpha = FALSE)
p + transition_time(year) +
labs(title = "Year: {frame_time}") +
shadow_mark(alpha = 0.3, size = 0.5)
p <- ggplot(
airquality,
aes(Day, Temp, group = Month, color = factor(Month))
) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top")
p
p + transition_reveal(Day)
cambio_m=p +
geom_point() +
transition_reveal(Day)
animate(cambio_m, height = 800, width =800)
# anim_save("cambio_m.gif")
p +
geom_point(aes(group = seq_along(Day))) +
transition_reveal(Day)
names(temp.promedio)
temp.promedio <- airquality %>%
group_by(Month) %>%
summarise(Temp = mean(Temp))
temp.promedio
names(airquality)
names(airquality)
temp.promedio <- airquality %>%
select(Month, Temp) %>%
group_by(Month) %>%
summarise(Temp = mean(Temp))
temp.promedio
p <- ggplot(temp.promedio, aes(Month, Temp, fill = Temp)) +
geom_col() +
scale_fill_distiller(palette = "Reds", direction = 1) +
theme_minimal() +
theme(
panel.grid = element_blank(),
panel.grid.major.y = element_line(color = "white"),
panel.ontop = TRUE
)
p
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
Sys.Date()
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
#`r colorize("some words in red", "red")`
#if(!require(devtools)) install.packages("devtools")
#devtools::install_github("dgrtwo/gganimate")
#devtools::install_github("yihui/animation")
library(tidyverse)
library(gganimate)
library(rgl)
library(gapminder)
library(ggplot2)
library(animation)
library(gt)
gt(head(gapminder))
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.8) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Expectativa de Vida")
p
GDP_time=p + transition_time(year) +
labs(title = "Año: {frame_time}")
#GDP_time
animate(GDP_time, height = 600, width =600)
anim_save("GDP_time.gif")
p + facet_wrap(~continent) +
transition_time(year) +
labs(title = "Año: {frame_time}")
p + transition_time(year) +
labs(title = "Año: {frame_time}") +
view_follow(fixed_y = TRUE)
p + transition_time(year) +
labs(title = "Year: {frame_time}") +
shadow_wake(wake_length = 0.2, alpha = FALSE)
p + transition_time(year) +
labs(title = "Year: {frame_time}") +
shadow_mark(alpha = 0.3, size = 0.5)
p <- ggplot(
airquality,
aes(Day, Temp, group = Month, color = factor(Month))
) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top")
p
p + transition_reveal(Day)
cambio_m=p +
geom_point() +
transition_reveal(Day)
animate(cambio_m, height = 800, width =800)
# anim_save("cambio_m.gif")
p +
geom_point(aes(group = seq_along(Day))) +
transition_reveal(Day)
names(airquality)
temp.promedio <- airquality %>%
select(Month, Temp) %>%
group_by(Month) %>%
summarise(Temp = mean(Temp))
temp.promedio
p <- ggplot(temp.promedio, aes(Month, Temp, fill = Temp)) +
geom_col() +
scale_fill_distiller(palette = "Reds", direction = 1) +
theme_minimal() +
theme(
panel.grid = element_blank(),
panel.grid.major.y = element_line(color = "white"),
panel.ontop = TRUE
)
p
p + transition_states(Month, wrap = FALSE)
p + transition_states(Month, wrap = FALSE) +
shadow_mark()
names(airquality)
names(airquality)
names(airquality)
names(airquality)[3] <- 'Viento'
names(airquality)[5] <- 'Mes'
names(airquality)[6] <- 'Día'
names(airquality)
p <- ggplot(
airquality,
aes(Day, Temp, group = Mes, color = factor(Mes))) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Día del Mes", y = "Temperatura") +
theme(legend.position = "top")
p
p <- ggplot(
airquality,
aes(Día, Temp, group = Mes, color = factor(Mes))) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Día del Mes", y = "Temperatura") +
theme(legend.position = "top")
p
p + transition_reveal(Día)
cambio_m=p +
geom_point() +
transition_reveal(Día)
animate(cambio_m, height = 800, width = 800)
# anim_save("cambio_m.gif")
p +
geom_point(aes(group = seq_along(Día))) +
transition_reveal(Día)
names(airquality)
temp.promedio <- airquality %>%
dplyr::select(Mes, Temp) %>%
group_by(Mes) %>%
summarise(Temp = mean(Temp))
temp.promedio
p <- ggplot(temp.promedio, aes(Mes, Temp, fill = Temp)) +
geom_col() +
scale_fill_distiller(palette = "Reds", direction = 1) +
theme_minimal() +
theme(
panel.grid = element_blank(),
panel.grid.major.y = element_line(color = "white"),
panel.ontop = TRUE
)
p
p + transition_states(Mes, wrap = FALSE)
p + transition_states(Mes, wrap = FALSE) +
shadow_mark()
names(airquality)
temp.promedio <- airquality %>%
dplyr::select(Mes, Temp) %>%
dplyr::group_by(Mes) %>%
summarise(Temp = mean( Temp))
temp.promedio
temp.promedio
library(ggplot2)
temp.promedio
p <- ggplot(temp.promedio, aes(Mes, Temp, fill = Temp )) +
geom_col() +
scale_fill_distiller(palette = "Reds", direction = 1) +
theme_minimal() +
theme(
panel.grid = element_blank(),
panel.grid.major.y = element_line(color = "white"),
panel.ontop = TRUE
)
p
install.packages("betareg")
knitr::opts_chunk$set(echo = TRUE)
library(xaringan)
install.packages("xaringan")
library(xaringan)
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
# Chunk 3
library(xaringan)
summary(cars)
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
library(xaringan)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
options(htmltools.dir.version = FALSE)
library(xaringan)
# a boring regression
fit = lm(dist ~ 1 + speed, data = cars)
coef(summary(fit))
dojutsu = c('地爆天星', '天照', '加具土命', '神威', '須佐能乎', '無限月読')
grep('天', dojutsu, value = TRUE)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 19, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
knitr::kable(head(iris), format = 'html')
library(leaflet)
leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)
DT::datatable(
head(iris, 10),
fillContainer = FALSE, options = list(pageLength = 8)
)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
---
class: inverse, left, middle
---
class: inverse, right, middle
# Get Started
---
R.version
R.Version
R.Version()
install.packages(c("bayestestR", "bslib", "datawizard", "DescTools", "DT", "Exact", "ggplotify", "ggsignif", "htmlwidgets", "insight", "knitr", "lava", "maptools", "mets", "nlme", "openssl", "parallelly", "plotrix", "pls", "pROC", "rgdal", "rgeos", "roxygen2"))
Yes
install.packages(c("bayestestR", "bslib", "datawizard", "DescTools", "DT", "Exact", "ggplotify", "ggsignif", "htmlwidgets", "insight", "knitr", "lava", "maptools", "mets", "nlme", "openssl", "parallelly", "plotrix", "pls", "pROC", "rgdal", "rgeos", "roxygen2"))
install.packages(c("bayestestR", "bslib", "datawizard", "DescTools", "DT", "Exact", "ggplotify", "ggsignif", "htmlwidgets", "insight", "knitr", "lava", "maptools", "mets", "nlme", "openssl", "parallelly", "plotrix", "pls", "pROC", "rgdal", "rgeos", "roxygen2"))
install.packages(c("bayestestR", "bslib", "datawizard", "DescTools", "DT", "Exact", "ggplotify", "ggsignif", "htmlwidgets", "insight", "knitr", "lava", "maptools", "mets", "nlme", "openssl", "parallelly", "plotrix", "pls", "pROC", "rgdal", "rgeos", "roxygen2"))
install.packages(c("DescTools", "roxygen2"))
install.packages(c("DescTools", "roxygen2"))
[Un enlace con más información, presione aquí](https://bookdown.org/yihui/rmarkdown/xaringan.html)
---
class: inverse, center, middle
install.packages("stringi")
xaringan:::inf_mr()
options(htmltools.dir.version = FALSE)
xaringan:::inf_mr()
xaringan:::inf_mr()
